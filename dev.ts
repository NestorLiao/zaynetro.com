#!/usr/bin/env -S deno run -A --watch=static/,routes/

import dev from "$fresh/dev.ts";
import config from "@/fresh.config.ts";
import { loadPosts } from "@/utils/blog.ts";
import * as path from "$std/path/mod.ts";

const buildDir = path.join(Deno.cwd(), "build");
await Deno.mkdir(buildDir, { recursive: true });

await genPosts();
await dev(import.meta.url, "./main.ts", config);

/** Generate a single file to import all blog posts from */
async function genPosts() {
  const { posts, images } = await loadPosts();

  const postsCache = path.join(buildDir, "posts.gen.ts");
  const postsImport = [...posts.entries()].map(([slug, p]) =>
    `blogPosts.set("${slug}", ${JSON.stringify(p)});`
  ).join("\n");
  const imagesImport = [...images.entries()].map(([key, value]) =>
    `blogImages.set("${key}", "${value}");`
  ).join("\n");
  const content = `// DO NOT EDIT. This file is autogenerated.

import { BlogPost } from "@/utils/blog.ts";

export const blogPosts: Map<string, BlogPost> = new Map();
export const blogImages: Map<string, string> = new Map();

${postsImport}

${imagesImport}
`;

  try {
    const existing = await Deno.readTextFile(postsCache);
    if (existing == content) {
      // Skip writing to a file (nothing changed)
      console.log("Posts haven't changed");
      return;
    }
  } catch (_e) {
    // No op
  }

  console.log("Updating posts.gen.ts");
  await Deno.writeTextFile(postsCache, content);
}
